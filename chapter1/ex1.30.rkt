(define (simpson f a b n)
  (define h (/ (- b a) n))
  (define (y k)
    (f (+ a (* k h))))
  (define (factor k)
    (cond ((or (= k 0) (= k n)) 1)
          ((odd? k) 4)
          (else 2)))
  (define (odd? x)
    (if (= (remainder x 2) 0)
        #f
        #t))
  (define (term k)
    (* (factor k) (y k)))
  (define (next x)
    (+ x 1))
  (if (odd? n)
      (error "n can't be odd")
      (exact->inexact (* (/ h 3) (sum term (term 0) next n)))))
(define (sum term a next b)
  (define (iter a result)
    (if (> a b)
        result
        (iter (next a) (+ result (term a)))))
  (iter a 0))
(define (cube x)
  (* x x x))
(simpson cube 0 1 10000)