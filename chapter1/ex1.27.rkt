(define (test-iter a n)
  (cond ((= a n) true)
        ((congruence? a n) (test-iter (+ a 1) n))
        (else false)))
(define (congruence? a n)
  (= (expmod a n n) a))
(define (expmod a n m)
  (cond ((= n 0) 1)
        ((even? n) (remainder (square (expmod a (/ n 2) m)) m))
        (else (remainder (* a (expmod a (- n 1) m)) m))))
(define (square x) (* x x))
(define (even? x)
  (if (= (remainder x 2) 0)
      true
      false))
(define (test n)
  (test-iter 1 n))
(test 561)
(test 1105)
(test 1729)
(test 2465)
(test 2821)
(test 6601)