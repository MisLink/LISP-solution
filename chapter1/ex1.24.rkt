;素数
(#%require racket)
(#%require racket/trace)
(define (square x) (* x x))
(define (even? x)
  (if (= (remainder x 2) 0)
      true
      false))
(define (expmod base exp m)
  (cond ((= exp 0) 1)
        ((even? exp)
         (remainder (square (expmod base (/ exp 2) m))
                    m))
        (else
         (remainder (* base (expmod base (- exp 1) m))
                    m))))

(define (fermat-test n)
  (define (try-it a)
    (= (expmod a n n) a))
  (try-it (+ 1 (random (- n 1)))))

(define (fast-prime? n times)
  (cond ((= times 0) true)
        ((fermat-test n) (fast-prime? n (- times 1)))
        (else false)))
;
(define (next-odd n)
  (if (= (remainder n 2) 1)
      (+ 2 n)
      (+ 1 n)))

(define (continue-primes n count)
  (cond ((= count 0) (newline))
        ((fast-prime? n 10)
         (display n)
         (newline)
         (continue-primes (next-odd n) (- count 1)))
        (else (continue-primes (next-odd n) count))))

(define (search-for-primes n)
  (define start-time (current-milliseconds))
  (continue-primes n 3)
  (- (current-milliseconds) start-time))
(search-for-primes 4000000000)
