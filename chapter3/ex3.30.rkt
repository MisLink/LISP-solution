#lang planet neil/sicp
(define (half-adder a b s c)
  (let ((d (make-wire))
        (e (make-wire)))
    (or-gate a b d)
    (and-gate a b c)
    (inverter c e)
    (and-gate d e s)))
(define (full-adder a b c-in sum c-out)
  (let ((s (make-wire))
        (c1 (make-wire))
        (c2 (make-wire)))
    (half-adder b c-in s c1)
    (half-adder a s sum c2)
    (or-gate c1 c2 c-out)))

(define (ripple-carry-adder lista listb lists c)
  (define (iter (a b s c-n))
    (if (and (null? a) (null? b) (null? s))
        true
        (let ((ak (car a))
              (bk (car b))
              (sk (car s))
              (remain-a (cdr a))
              (remain-b (cdr b))
              (remain-s (cdr s))
              (ck (make-wire)))
          (set-signal! ck c-n)
          (full-adder ak bk ck sk c)
          (iter remain-a remain-b remain-s (get-signal c)))))
  (iter lista listb lists (get-signal c)))
