#lang planet neil/sicp
(define (make-queue)
  (cons '() '()))
(define (front-ptr q) (car q))
(define (rear-ptr q) (cdr q))
(define (set-front-ptr! q item) (set-car! q item))
(define (set-rear-ptr! q item) (set-cdr! q item))
(define (empty-queue? q)
  (null? (front-ptr q)))
(define (front-queue q)
  (if (empty-queue?)
      (car (front-ptr q))
      (error "empty queue")))
(define (insert-queue! q item)
  (let ((new (cons item '())))
    (if (empty-queue? q)
        (begin
          (set-front-ptr! q new)
          (set-rear-ptr! q new)
          (print-queue q))
        (begin
          (set-cdr! (rear-ptr q) new)
          (set-rear-ptr! q new)
          (print-queue q)))))
(define (delete-queue! q)
  (if (empty-queue? q)
      (error "empty queue")
      (begin
        (set-front-ptr! q (cdr (front-ptr q)))
        (print-queue q))))
(define (print-queue q)
  (car q))


(define q (make-queue))
(insert-queue! q 'a)
(insert-queue! q 'b)
(insert-queue! q 'c)
(delete-queue! q)
(delete-queue! q)
(delete-queue! q)
