#lang racket
(define (equal? x y)
  (cond ((and (symbol? x) (symbol? y))
         (eq? x y))
        ((and (list? x) (list? y))
         (list-equal? x y))))
(define (list-equal? x y)
  (cond ((and (null? x) (null? y))
         true)
        ((or (null? x) (null? y))
         false)
        ((and (equal? (car x) (car y))
         (equal? (cdr x) (cdr y))))
        (else false)))
(equal? 'symbol 'symbol)
(equal? 'symbol 'another-symbol)
(equal? (list 'a 'b 'c) (list 'a 'b 'c))
(equal? (list 'a) (list 'a 'b 'c))
