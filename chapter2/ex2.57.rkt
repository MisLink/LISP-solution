#lang racket

(define (variable? x)
  (symbol? x))
(define (same-variable? v1 v2)
  (and (variable? v1) (variable? v2) (eq? v1 v2)))
(define (=number? exp num)
  (and (number? exp) (= exp num)))
(define (single-operand? x)
  (null? (cdr x)))

(define (make-sum a1 . a2)
  (if (single-operand? a2)
      (let ((a2 (car a2)))
        (cond ((=number? a1 0) a2)
        ((=number? a2 0) a1)
        ((and (number? a1) (number? a2)) (+ a1 a2))
        (else
         (list '+ a1 a2))))
      (cons '+ (cons a1 a2))))
(define (make-product a1 . a2)
  (if (single-operand? a2)
      (let ((a2 (car a2)))
        (cond ((or (=number? a1 0) (=number? a2 0)) 0)
        ((=number? a1 1) a2)
        ((=number? a2 1) a1)
        ((and (number? a1) (number? a2)) (* a1 a2))
        (else
         (list '* a1 a2))))
      (cons '* (cons a1 a2)))
  )
(define (make-exponentiation a1 a2)
  (cond ((=number? a2 0) 1)
        ((=number? a2 1) a1)
        ((and (number? a1) (number? a2)) (expt a1 a2))
        (else
         (list '** a1 a2))))

(define (sum? x)
  (and (pair? x) (eq? (car x) '+)))
(define (addend s)
  (cadr s))
(define (augend s)
  (if (single-operand? (cddr s))
      (car (cddr s))
      (apply make-sum (cddr s))))

(define (product? x)
  (and (pair? x) (eq? (car x) '*)))
(define (multiplier s)
  (cadr s))
(define (multiplicand s)
  (if (single-operand? (cddr s))
      (car (cddr s))
      (apply make-product (cddr s))))

(define (exponentiation? x)
  (and (pair? x) (eq? (car x) '**)))
(define (base s)
  (cadr s))
(define (exponent s)
  (caddr s))

(define (deriv exp var)
  (cond ((number? exp) 0)
        ((variable? exp)
         (if (same-variable? exp var)
             1
             0))
        ((sum? exp)
        (make-sum (deriv (addend exp) var)
                  (deriv (augend exp) var)))
        ((product? exp)
         (make-sum (make-product (multiplier exp)
                                 (deriv (multiplicand exp) var))
                   (make-product (deriv (multiplier exp) var)
                                 (multiplicand exp))))
        ((exponentiation? exp)
         (make-product
          (exponent exp)
          (make-product
           (make-exponentiation (base exp) (- (exponent exp) 1))
           (deriv (base exp) var))))
        (else
         (error "unknown expression type -- DERIV" exp))))

(deriv '(+ x 3) 'x)
(deriv '(* x y) 'x)
(deriv '(* x y (+ x 3)) 'x)
(deriv '(** x 3) 'x)
