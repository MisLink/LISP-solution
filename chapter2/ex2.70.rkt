#lang racket
;leaf
(define (make-leaf symbol weight)
  (list 'leaf symbol weight))
(define (leaf? obj)
  (eq? (car obj) 'leaf))
(define (symbol-leaf x)
  (cadr x))
(define (weight-leaf x)
  (caddr x))
;tree
(define (left-branch tree)
  (car tree))
(define (right-branch tree)
  (cadr tree))
(define (symbols tree)
  (if (leaf? tree)
      (list (symbol-leaf tree))
      (caddr tree)))
(define (weight tree)
  (if (leaf? tree)
      (weight-leaf tree)
      (cadddr tree)))
(define (make-code-tree left right)
  (list left
        right
        (append (symbols left) (symbols right))
        (+ (weight left) (weight right))))
;encode
(define (element-of-set? x set)
  (cond ((null? set)
         false)
        ((equal? x (car set))
         true)
        (else
         (element-of-set? x (cdr set)))))

(define (encode-symbol sym tree)
  (define (correct-branch? branch)
    (if (leaf? branch)
        (equal? sym (symbol-leaf branch))
        (element-of-set? sym (symbols branch))))
  (let ((lb (left-branch tree))
        (rb (right-branch tree)))
    (cond ((correct-branch? lb)
           (if (leaf? lb)
               '(0)
               (cons 0 (encode-symbol sym lb))))
          ((correct-branch? rb)
           (if (leaf? rb)
               '(1)
               (cons 1 (encode-symbol sym rb)))))))
(define (encode message tree)
  (if (null? message)
      '()
      (append (encode-symbol (car message) tree)
              (encode (cdr message) tree))))
;make tree
(define (adjoin-set x set)
  (cond ((null? set) (list x))
        ((< (weight x) (weight (car set))) (cons x set))
        (else
         (cons (car set)
               (adjoin-set x (cdr set))))))

(define (make-leaf-set pairs)
  (if (null? pairs)
      '()
      (let ((pair (car pairs)))
        (adjoin-set (make-leaf (car pair) (cadr pair))
                    (make-leaf-set (cdr pairs))))))

(define (successive-merge set)
  (if (null? (cdr set))
      (car set)
      (successive-merge (adjoin-set (make-code-tree (car set) (cadr set))
                                    (cddr set)))))
(define (generate-huffman-tree pairs)
  (successive-merge (make-leaf-set pairs)))

(define tree (generate-huffman-tree '((A 2) (NA 16) (BOOM 1) (SHA 3) (GET 2) (YIP 9) (JOB 2) (WAH 1))))

(length (encode '(GET A JOB) tree))
(length (encode '(SHA NA NA NA NA NA NA NA NA) tree))
(length (encode '(WAH YIP YIP YIP YIP YIP YIP YIP YIP YIP) tree))
(length (encode '(SHA BOOM) tree))
